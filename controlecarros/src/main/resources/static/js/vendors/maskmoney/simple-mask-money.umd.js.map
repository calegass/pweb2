{"version":3,"file":"simple-mask-money.umd.js","sources":["../src/get-base-configuration.ts","../src/set-mask.ts","../src/remove-mask.ts","../src/format-to-number.ts","../src/create-instance-of.ts","../src/format-to-currency.ts","../src/simple-mask-money.ts"],"sourcesContent":["import type {\n  OptionalSimpleMaskMoneyConfiguration,\n  SimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nconst configuration: SimpleMaskMoneyConfiguration = {\n  allowNegative     : false,\n  negativeSignAfter : false,\n  decimalSeparator  : ',',\n  fixed             : true,\n  fractionDigits    : 2,\n  prefix            : '',\n  suffix            : '',\n  thousandsSeparator: '.',\n  cursor            : 'end',\n  allowEmpty        : false,\n};\n\nfunction getBaseConfiguration(\n  current?: OptionalSimpleMaskMoneyConfiguration\n): SimpleMaskMoneyConfiguration {\n  return Object.assign({ ...configuration }, current);\n}\n\nexport default getBaseConfiguration;\n","import type {\n  HTMLInputElementMasked,\n  OptionalSimpleMaskMoneyConfiguration,\n} from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\n\nconst numbers = '0123456789'.split('');\n\n/**\n * It applies a mask to an input element, formatting its value as a currency.\n * It takes an input element and an optional configuration object as parameters.\n * The function listens for keyboard events on the input element and updates its value accordingly.\n * It also handles caret positioning and allows for undoing changes. The function returns a method to remove the mask from the input element.\n *\n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskmoneysetmask | SimpleMaskMoney.setMask}\n *\n * @param {HTMLInputElement | string | null} input - The first can be a QueryCSSSelectorString or an Input\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {() => void} A function to remove the input mask\n *\n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n *\n * <input id=\"my-input\" />\n *\n * <script>\n *     const remove = SimpleMaskMoney.setMask('#my-input');\n *     remove(); // To remove the mask and listeners\n * </script>\n * ```\n *\n * @example\n * Here's an example using from npm to React with CSSSelector:\n * ```jsx\n * import { setMask } from 'simple-mask-money';\n *\n * function InputMoney() {\n *    useEffect(() => setMask('#my-input'), []);\n *\n *    return <input id=\"my-input\" />;\n * }\n * ```\n *\n * @throws {@link ADD_LINK_AQUI}\n * This exception is thrown if the element is not an input.\n */\nfunction setMask(\n  input: HTMLInputElementMasked | HTMLInputElement | string | null,\n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const currentConfiguration = getBaseConfiguration(configuration);\n\n  const {\n    beforeFormat,\n    afterFormat,\n    allowNegative,\n    negativeSignAfter,\n    fractionDigits,\n    decimalSeparator,\n    thousandsSeparator,\n    fixed,\n    prefix,\n    suffix,\n    cursor,\n    allowEmpty,\n  } = currentConfiguration;\n\n  if (typeof document === 'undefined') return () => void 0;\n\n  const element =\n    typeof input === 'string' ? document.querySelector(input) : input ?? null;\n\n  if (element === null) return () => void 0;\n\n  if (!(element instanceof HTMLInputElement))\n    throw new Error('the element must be an input');\n\n  const completer = fixed ? '0' : '_';\n\n  // Change keyboard type to mobile devices\n  if (!element.hasAttribute('inputmode'))\n    element.setAttribute('inputmode', 'numeric');\n\n  const triggerInputChanges = (\n    value: string,\n    caret?: [start: number, end: number]\n  ) => {\n    element.value = value;\n    element.dispatchEvent(new InputEvent('input'));\n    setCaretPosition(caret);\n    lastValue = value;\n    afterFormat?.(value);\n  };\n\n  const firstPositionToNumber = prefix.length;\n  const allowedKeys = [...numbers, 'Backspace', allowNegative ? '-' : ''];\n  const lengthUntilFirstThousandSeparator = 3 + decimalSeparator.length + fractionDigits;\n\n  const addPrefixAndSuffix = (v: string) => `${prefix}${v}${suffix}`;\n  const getLastPositionToNumber = (v?: string) => v?.length ?? element.value.length - suffix.length;\n\n  const caretIsOnPrefix = (n: number) => n < firstPositionToNumber;\n  const caretIsOnSuffix = (n: number) => suffix.length > 0 && n > getLastPositionToNumber();\n\n  const formatToMask = (v: Array<string>, trimExtraDecimals = false, action?: readonly [name: string, parmas: readonly [start: number, length: number, replace?: string]]) => {\n    let actionName: string | undefined;\n    const characteres = [...v];\n    let result = new Array<string>();\n\n    if (action) {\n      [actionName] = action;\n      const [, actionParams] = action;\n      const [start, end] = actionParams;\n\n      // Add or remove characters\n      const characteresRemoved = characteres.splice(...(actionParams as [number, number]));\n\n      // Backspace into decimal separator or thousands separator should remove next character\n      if (actionName === 'remove' && characteresRemoved.length === 1) {\n        const [removed] = characteresRemoved;\n        if (removed === decimalSeparator || removed === thousandsSeparator)\n          characteres.splice(start - 1, end);\n      }\n    }\n\n    let thousandsCounter = lengthUntilFirstThousandSeparator;\n    let decimalSeparatorAdded = false;\n    let completersToRemove = 0;\n    let isNegative = false;\n\n    for (let character; (character = characteres.pop()); ) {\n      if (character === '-') {\n        isNegative = true;\n        continue;\n      }\n\n      if (character === decimalSeparator && decimalSeparatorAdded && trimExtraDecimals) {\n        const startAt = result.indexOf(decimalSeparator);\n        result.splice(startAt, decimalSeparator.length);\n\n        const fractionDigitsNumbers = result.slice(0, fractionDigits);\n\n        if (fractionDigitsNumbers.length < result.length)\n          thousandsCounter += result.length - fractionDigitsNumbers.length;\n\n        result = [\n          decimalSeparator,\n          ...fractionDigitsNumbers,\n        ];\n        decimalSeparatorAdded = true;\n        continue;\n      }\n\n      if (Number.isNaN(Number(character)) || character === ' ') continue;\n\n      thousandsCounter -= 1;\n\n      if (character === completer)\n        completersToRemove += 1;\n      else if (character !== decimalSeparator && completersToRemove > 0)\n        completersToRemove = 0;\n\n      if (thousandsCounter === 0) {\n        result.unshift(thousandsSeparator);\n        thousandsCounter = 3;\n      }\n\n      result.unshift(character);\n\n      if (result.length !== fractionDigits || decimalSeparatorAdded) continue;\n\n      result.unshift(decimalSeparator);\n      decimalSeparatorAdded = true;\n    }\n\n    if (completersToRemove !== 0)\n      result.splice(0, completersToRemove);\n\n    if (result.every(v => v === completer) && actionName === 'remove')\n      isNegative = false;\n\n    if (result.length <= fractionDigits)\n      result = [completer, decimalSeparator, result.join('').padStart(fractionDigits, completer)];\n    else if (result.length === fractionDigits + decimalSeparator.length) // ,00\n      result.unshift(completer);\n\n    if (isNegative)\n      result[negativeSignAfter ? 'push' : 'unshift']('-');\n\n    return addPrefixAndSuffix(result.join(''));\n  };\n\n  const setCaretPosition = (force?: [start: number, end?: number]) => {\n    const lastPositionToNumber = getLastPositionToNumber();\n    const positionDefault = [lastPositionToNumber, lastPositionToNumber] as const;\n\n    let position = positionDefault;\n\n    if (cursor === 'move' && force)\n      position = typeof force[1] === 'number'\n        ? [force[0], force[1]] as const\n        : [force[0], force[0]] as const;\n\n    element.setSelectionRange(...position);\n\n    return position;\n  };\n\n  beforeFormat?.(element.value);\n\n  const initialValue = formatToMask(element.value.split(''), true);\n\n  let lastValue = initialValue;\n\n  const onKeyDown = (e: KeyboardEvent) => {\n    beforeFormat?.(element.value);\n    const lastPositionToNumber = getLastPositionToNumber();\n\n    let start = element.selectionStart ?? lastPositionToNumber;\n    let end = element.selectionEnd ?? lastPositionToNumber;\n\n    // Trigger input submit\n    if (e.key === 'Enter') return;\n\n    // Select all\n    if (e.ctrlKey && e.key === 'a') return setCaretPosition([firstPositionToNumber, lastPositionToNumber]);\n\n    // Undo to first value\n    if (e.ctrlKey && e.key === 'z') return triggerInputChanges(initialValue);\n\n    // Allow move caret after or before the prefix or suffix\n    if (cursor === 'move' && (\n      (e.key === 'ArrowLeft' && start > firstPositionToNumber) ||\n      (e.key === 'ArrowRight' && start < lastPositionToNumber)\n    )) return;\n\n    e.preventDefault();\n\n    // Select all\n    if (e.ctrlKey && e.key === 'a') return setCaretPosition([firstPositionToNumber, lastPositionToNumber]);\n\n    // Allow only number\n    if (!allowedKeys.includes(e.key)) return;\n\n    const isBackspace = e.key === 'Backspace';\n\n    if (caretIsOnPrefix(start)) [start, end] = setCaretPosition([firstPositionToNumber]);\n\n    if (caretIsOnSuffix(start)) [start, end] = setCaretPosition([lastPositionToNumber]);\n\n    // No allow erase the prefix\n    if (isBackspace && start === 0) return;\n\n    if (allowEmpty && isBackspace && element.value.length <= prefix.length + 1) {\n      triggerInputChanges(prefix);\n      return;\n    }\n\n    const characteres = element.value.split('');\n\n    const length = Math.abs(end - start);\n    const removeMoreThanOne = length > 0;\n\n    // Define range that should remove\n    const remove =\n      removeMoreThanOne ? ([start, length] as const) : ([start - 1, 1] as const);\n\n    // Define a range to add\n    const add = [start, removeMoreThanOne ? length : 0, e.key] as const;\n\n    const action = isBackspace ? 'remove' : 'add';\n\n    const newValue = formatToMask(characteres, false, [action, ({ add, remove })[action]]);\n\n    if (!isBackspace && lastValue.length < newValue.length && start < getLastPositionToNumber(newValue)) {\n      start += newValue.length - lastValue.length;\n      end += newValue.length - lastValue.length;\n    } else if (isBackspace && lastValue.length > newValue.length && start > firstPositionToNumber) {\n      const characteresRemoved = lastValue.length - newValue.length;\n      start = start - characteresRemoved <= firstPositionToNumber ? firstPositionToNumber : start - characteresRemoved;\n      end = end - characteresRemoved <= firstPositionToNumber ? firstPositionToNumber : end - characteresRemoved;\n    }\n\n    triggerInputChanges(newValue, [start, end]);\n  };\n\n  const onSelectionChange = () => {\n    if (document.activeElement !== element) return;\n\n    const start = element.selectionStart;\n    const end = element.selectionEnd;\n\n    if (typeof start !== 'number' || typeof end !== 'number') return;\n\n    let position: [start: number, end?: number] | undefined;\n\n    const rangeStartOnPrefix = caretIsOnPrefix(start);\n    const rangeStartOnSuffix = caretIsOnSuffix(end);\n\n    const rangeEndOnSuffix = caretIsOnSuffix(start);\n    const rangeEndOnPrefix = caretIsOnPrefix(end);\n\n    if (rangeStartOnPrefix || rangeStartOnSuffix || rangeEndOnPrefix || rangeEndOnSuffix) position = [\n      rangeStartOnPrefix ? firstPositionToNumber : (rangeStartOnSuffix ? getLastPositionToNumber() : start),\n      rangeEndOnPrefix ? firstPositionToNumber : (rangeStartOnSuffix ? getLastPositionToNumber() : end),\n    ];\n\n    // Only set position if is on prefix or suffix\n    if (!position) return;\n\n    setCaretPosition(position);\n  };\n\n  if (allowEmpty && initialValue === `${prefix}0`) {\n    triggerInputChanges('');\n  } else {\n    triggerInputChanges(initialValue);\n  }\n  \n  if (element.hasAttribute('readonly') || element.hasAttribute('disabled')) return () => void 0;\n\n  element.addEventListener('keydown', onKeyDown);\n  document.addEventListener('selectionchange', onSelectionChange);\n\n  const removeMask = (): void => {\n    element.removeEventListener('keydown', onKeyDown);\n    document.removeEventListener('selectionchange', onSelectionChange);\n    delete (element as HTMLInputElementMasked).removeMask;\n  };\n\n  Object.defineProperty(element, 'removeMask', {\n    value: removeMask,\n    configurable: true,\n    enumerable: true,\n    writable: true,\n  });\n\n  return removeMask;\n}\n\nexport default setMask;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#SimpleMaskMoney.setMask | SimpleMaskMoney.setMask} method to get more information about this type\n *\n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#SimpleMaskMoney.setMask | SimpleMaskMoney.setMask}\n */\nexport type SetMaskFunction = typeof setMask;\n\n","import type { HTMLInputElementMasked } from './types';\n\n/**\n * It removes a mask from an input element. \n * It takes an input element or selector string as a parameter and returns a function that removes the mask from the input element.\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#removemask | SimpleMaskMoney.removeMask}\n *\n * @param {HTMLInputElementMasked | HTMLInputElement | string | null} input - The input element or selector string.\n * @returns {() => void} A function that removes the mask from the input element.\n */\nfunction removeMask(\n  input: HTMLInputElementMasked | HTMLInputElement | string | null\n): () => void {\n  if (typeof document === 'undefined') return () => void 0;\n\n  const element =\n    typeof input === 'string' ? document.querySelector(input) : input ?? null;\n\n  if (element === null) return () => void 0;\n\n  if (!(element instanceof HTMLInputElement))\n    throw new Error('the element must be an input');\n\n  return () => {\n    if ('removeMask' in element && typeof element.removeMask === 'function')\n      return element.removeMask();\n  };\n}\n\n\nexport default removeMask;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#removemask | SimpleMaskMoney.removeMask} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#removemask | SimpleMaskMoney.removeMask}\n * \n */\nexport type RemoveMaskFunction = typeof removeMask;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\n\n/**\n * It removes any non-numeric characters from the input string and returns a number.\n * It takes a number or string as input.\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n * \n * @param {string | number} value - The first can be a number or string\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {number} A number with any non-numeric characters removed e.g when receive `$0.66` return `0,66`\n * \n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n * \n * <script>\n *     const value = SimpleMaskMoney.formatToNumber('$666,99');\n *     // Before save convert to number\n *     console.log(value); // 666.99\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```jsx\n * import { formatToCurrency } from 'simple-mask-money';\n * \n * const value = formatToNumber('$666,99');\n * // Before save convert to number \n * console.log(value); // 666.99\n * ```\n */\nfunction formatToNumber(\n  value: string | number,\n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const { decimalSeparator, allowNegative } = getBaseConfiguration(configuration);\n\n  const normalizeNumber = (n: number) =>\n    n.toString().replace('.', decimalSeparator);\n\n  const stringIsNumber = (s: string) => {\n    const parsedValue = Number(s);\n    return Number.isNaN(parsedValue) ? s : normalizeNumber(parsedValue);\n  };\n\n  const normalizedValue =\n    typeof value === 'number' ? normalizeNumber(value) : stringIsNumber(value);\n\n  const characteres = normalizedValue.split('');\n  \n  let result = '';\n  \n  const isNegative = allowNegative && characteres.includes('-');\n\n  for (let character; (character = characteres.shift()); ) {\n    if (!Number.isNaN(Number(character))) result += character;\n\n    if (character !== decimalSeparator) continue;\n    result += '.';\n  }\n\n  return parseFloat(`${isNegative ? '-' : '' }${result}`);\n}\n\nexport default formatToNumber;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattonumber | SimpleMaskMoney.formatToNumber}\n */\nexport type FormatToNumberFunction = typeof formatToNumber;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\n/**\n * It returns a the same function received but now It has default values for the configuration parameter. Allowing you to create instances of a function with different configurations without modifying the original function.\n * It takes two parameters some function of SimpleMaskMoney and configuration\n * \n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.setMask}\n *\n * @param {<P, R>(param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R} fn - The first must be the function which you will use\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskmoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {<P, R>(param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R} A new function to use with default values\n * \n * @example\n * Here's an example using from cdn with Vanilla JS:\n * ```html\n * <script src=\"\"></script>\n * \n * <input id=\"my-input\" />\n * \n * <script>\n *   const { createInstanceOf, setMask } = SimpleMaskMoney;\n *   const configuration = {\n *     // Your configuration here\n *   };\n *   const setMask = createInstanceOf(setMask, configuration);\n *   const remove = setMask('#my-input'); // Now this method is with the same parameters passed before\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```javascript\n * import { createInstanceOf, setMask } from 'simple-mask-money';\n * const configuration = {\n *   // Your configuration here\n * };\n * const setMask = createInstanceOf(setMask, configuration);\n * const remove = setMask('#my-input'); // Now this method is with the same parameters passed before\n * ```\n */\nfunction createInstanceOf<P, R>(\n  fn: (param: P, configuration?: OptionalSimpleMaskMoneyConfiguration) => R,\n  configuration: OptionalSimpleMaskMoneyConfiguration,\n) {\n  const instanceOf = (\n    param: P,\n    overwritedConfiguration: OptionalSimpleMaskMoneyConfiguration = {},\n  ) => fn(param, { ...configuration, ...overwritedConfiguration }) as R;\n\n  return instanceOf as typeof fn;\n}\n\nexport default createInstanceOf;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.createInstanceOf} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#createinstanceof | SimpleMaskMoney.createInstanceOf}\n * \n */\nexport type CreateInstanceOfFunction = typeof createInstanceOf;\n","import type { OptionalSimpleMaskMoneyConfiguration } from 'src/types';\n\nimport getBaseConfiguration from 'src/get-base-configuration';\nimport formatToNumber from 'src/format-to-number';\n\n/**\n * It formats the input value as a currency string based on the provided configuration and returns the formatted output\n * It takes a number or string value and an optional configuration object as input.\n *\n * @remarks\n * This method is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency}\n *\n * @param {string | number} value - The first can be a number or string\n * @param {Partial<SimpleMaskMoneyConfiguration>} configuration - The second is an object with the configuration to check options visit {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#simplemaskMoneyconfiguration | SimpleMaskMoneyConfiguration}\n * @returns {string} A formated string based on the input value and configuration options e.g when receive `0.66` return `$0,66`\n * \n * @example\n * Here's an example using from cdn with CSSSelector:\n * ```html\n * <script src=\"\"></script>\n * \n * <script>\n *     const value = SimpleMaskMoney.formatToCurrency(666.99, { prefix: '$' });\n *     console.log(value); // \"$666,99\"\n * </script>\n * ```\n * \n * @example\n * Here's an example using from npm with ESmodules:\n * ```javascript\n * import { formatToCurrency } from 'simple-mask-money';\n * \n * const value = formatToCurrency(666.99, { prefix: '$' });\n * console.log(value); // \"$666,99\"\n * ```\n */\nfunction formatToCurrency(\n  value: number | string, \n  configuration?: OptionalSimpleMaskMoneyConfiguration,\n) {\n  \n  const { \n    fixed,\n    prefix, suffix, \n    fractionDigits,\n    thousandsSeparator, decimalSeparator,\n    allowNegative, negativeSignAfter,\n  } = getBaseConfiguration(configuration);\n\n  const completer = fixed ? '0' : '_';\n\n  const addPrefixAndSuffix = (v: string) => `${prefix}${v}${suffix}`;\n  const fillDecimals = (v: string) => v.padEnd(fractionDigits, completer);\n  \n  const srtValue = value.toString();\n\n  if (srtValue.length === 0) return addPrefixAndSuffix(`${completer}${decimalSeparator}${fillDecimals('')}`);\n\n  let output = '';\n\n  const isNegative = allowNegative && srtValue.includes('-');\n\n  const numberValue = formatToNumber(value, configuration).toString().replace('-', '');\n\n  const [thousands, decimals] = numberValue.toString().split('.');\n\n  const formatedDecimal = fillDecimals(\n    decimals \n      ? decimals.substring(0, fractionDigits) \n      : ''\n  );\n\n  const thousandGroups = [];\n  \n  for (let i = 0; i < thousands.length; i += 3) \n    thousandGroups.unshift(thousands.substring(thousands.length - i, thousands.length - i - 3));\n  \n  output = `${thousandGroups.join(thousandsSeparator)}${decimalSeparator}${formatedDecimal}`; \n\n  if (isNegative)\n    output = negativeSignAfter ? `${output}-` : `-${output}`;\n\n  return addPrefixAndSuffix(output);\n}\n\nexport default formatToCurrency;\n/**\n * Check the {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency} method to get more information about this type\n * \n * @remarks\n * This type is part of the {@link https://github.com/codermarcos/simple-mask-money/ | SimpleMaskMoney} to see the full documentation check {@link https://github.com/codermarcos/simple-mask-money/tree/main/examples/4.x.x#formattocurrency | SimpleMaskMoney.formatToCurrency}\n */\nexport type FormatToCurrencyFunction = typeof formatToCurrency;\n","export type { SimpleMaskMoneyConfiguration } from 'src/types';\n\nexport type { SetMaskFunction } from 'src/set-mask';\nexport type { RemoveMaskFunction } from 'src/remove-mask';\nexport type { FormatToNumberFunction } from 'src/format-to-number';\nexport type { CreateInstanceOfFunction } from 'src/create-instance-of';\nexport type { FormatToCurrencyFunction } from 'src/format-to-currency';\n\nimport setMask from 'src/set-mask';\nimport removeMask from 'src/remove-mask';\nimport formatToNumber from 'src/format-to-number';\nimport createInstanceOf from 'src/create-instance-of';\nimport formatToCurrency from 'src/format-to-currency';\n\nconst SimpleMaskMoney = { setMask, removeMask, formatToNumber, createInstanceOf, formatToCurrency };\n\nexport default SimpleMaskMoney;\n\nexport { setMask, removeMask, formatToNumber, createInstanceOf, formatToCurrency };\n"],"names":["configuration","allowNegative","negativeSignAfter","decimalSeparator","fixed","fractionDigits","prefix","suffix","thousandsSeparator","cursor","allowEmpty","getBaseConfiguration","current","Object","assign","numbers","split","setMask","input","currentConfiguration","beforeFormat","afterFormat","document","element","querySelector","HTMLInputElement","Error","completer","hasAttribute","setAttribute","triggerInputChanges","value","caret","dispatchEvent","InputEvent","setCaretPosition","lastValue","firstPositionToNumber","length","allowedKeys","lengthUntilFirstThousandSeparator","getLastPositionToNumber","v","_a","caretIsOnPrefix","n","caretIsOnSuffix","formatToMask","trimExtraDecimals","action","actionName","characteres","result","Array","actionParams","start","end","characteresRemoved","splice","removed","thousandsCounter","decimalSeparatorAdded","completersToRemove","isNegative","character","pop","startAt","indexOf","fractionDigitsNumbers","slice","Number","isNaN","unshift","every","join","padStart","addPrefixAndSuffix","force","lastPositionToNumber","position","setSelectionRange","initialValue","onKeyDown","e","selectionStart","_b","selectionEnd","key","ctrlKey","preventDefault","includes","isBackspace","Math","abs","removeMoreThanOne","remove","add","newValue","onSelectionChange","activeElement","rangeStartOnPrefix","rangeStartOnSuffix","rangeEndOnSuffix","rangeEndOnPrefix","addEventListener","removeMask","removeEventListener","defineProperty","configurable","enumerable","writable","formatToNumber","normalizeNumber","toString","replace","s","parsedValue","stringIsNumber","shift","parseFloat","createInstanceOf","fn","param","overwritedConfiguration","formatToCurrency","fillDecimals","padEnd","srtValue","output","numberValue","thousands","decimals","formatedDecimal","substring","thousandGroups","i","SimpleMaskMoney"],"mappings":"uPAKA,MAAMA,EAA8C,CAClDC,eAAoB,EACpBC,mBAAoB,EACpBC,iBAAoB,IACpBC,OAAoB,EACpBC,eAAoB,EACpBC,OAAoB,GACpBC,OAAoB,GACpBC,mBAAoB,IACpBC,OAAoB,MACpBC,YAAoB,GAGtB,SAASC,EACPC,GAEA,OAAOC,OAAOC,OAAMD,OAAAC,OAAA,CAAA,EAAMd,GAAiBY,EAC7C,CCfA,MAAMG,EAAU,aAAaC,MAAM,IA2CnC,SAASC,EACPC,EACAlB,GAEA,MAAMmB,EAAuBR,EAAqBX,IAE5CoB,aACJA,EAAYC,YACZA,EAAWpB,cACXA,EAAaC,kBACbA,EAAiBG,eACjBA,EAAcF,iBACdA,EAAgBK,mBAChBA,EAAkBJ,MAClBA,EAAKE,OACLA,EAAMC,OACNA,EAAME,OACNA,EAAMC,WACNA,GACES,EAEJ,GAAwB,oBAAbG,SAA0B,MAAO,KAAY,EAExD,MAAMC,EACa,iBAAVL,EAAqBI,SAASE,cAAcN,GAASA,QAAAA,EAAS,KAEvE,GAAgB,OAAZK,EAAkB,MAAO,KAAY,EAEzC,KAAMA,aAAmBE,kBACvB,MAAM,IAAIC,MAAM,gCAElB,MAAMC,EAAYvB,EAAQ,IAAM,IAG3BmB,EAAQK,aAAa,cACxBL,EAAQM,aAAa,YAAa,WAEpC,MAAMC,EAAsB,CAC1BC,EACAC,KAEAT,EAAQQ,MAAQA,EAChBR,EAAQU,cAAc,IAAIC,WAAW,UACrCC,EAAiBH,GACjBI,EAAYL,EACZV,SAAAA,EAAcU,EAAM,EAGhBM,EAAwB/B,EAAOgC,OAC/BC,EAAc,IAAIxB,EAAS,YAAad,EAAgB,IAAM,IAC9DuC,EAAoC,EAAIrC,EAAiBmC,OAASjC,EAGlEoC,EAA2BC,IAAe,IAAAC,EAAA,OAAa,QAAbA,EAAAD,aAAA,EAAAA,EAAGJ,cAAU,IAAAK,EAAAA,EAAApB,EAAQQ,MAAMO,OAAS/B,EAAO+B,MAAM,EAE3FM,EAAmBC,GAAcA,EAAIR,EACrCS,EAAmBD,GAActC,EAAO+B,OAAS,GAAKO,EAAIJ,IAE1DM,EAAe,CAACL,EAAkBM,GAAoB,EAAOC,KACjE,IAAIC,EACJ,MAAMC,EAAc,IAAIT,GACxB,IAAIU,EAAS,IAAIC,MAEjB,GAAIJ,EAAQ,EACTC,GAAcD,EACf,MAAS,CAAAK,GAAgBL,GAClBM,EAAOC,GAAOF,EAGfG,EAAqBN,EAAYO,UAAWJ,GAGlD,GAAmB,WAAfJ,GAAyD,IAA9BO,EAAmBnB,OAAc,CAC9D,MAAOqB,GAAWF,EACdE,IAAYxD,GAAoBwD,IAAYnD,GAC9C2C,EAAYO,OAAOH,EAAQ,EAAGC,EACjC,CACF,CAED,IAAII,EAAmBpB,EACnBqB,GAAwB,EACxBC,EAAqB,EACrBC,GAAa,EAEjB,IAAK,IAAIC,EAAYA,EAAYb,EAAYc,OAC3C,GAAkB,MAAdD,EAKJ,GAAIA,IAAc7D,GAAoB0D,GAAyBb,EAA/D,CACE,MAAMkB,EAAUd,EAAOe,QAAQhE,GAC/BiD,EAAOM,OAAOQ,EAAS/D,EAAiBmC,QAExC,MAAM8B,EAAwBhB,EAAOiB,MAAM,EAAGhE,GAE1C+D,EAAsB9B,OAASc,EAAOd,SACxCsB,GAAoBR,EAAOd,OAAS8B,EAAsB9B,QAE5Dc,EAAS,CACPjD,KACGiE,GAELP,GAAwB,CAEzB,MAEGS,OAAOC,MAAMD,OAAON,KAA6B,MAAdA,IAEvCJ,GAAoB,EAEhBI,IAAcrC,EAChBmC,GAAsB,EACfE,IAAc7D,GAAoB2D,EAAqB,IAC9DA,EAAqB,GAEE,IAArBF,IACFR,EAAOoB,QAAQhE,GACfoD,EAAmB,GAGrBR,EAAOoB,QAAQR,GAEXZ,EAAOd,SAAWjC,GAAkBwD,IAExCT,EAAOoB,QAAQrE,GACf0D,GAAwB,SAxCtBE,GAAa,EAyDjB,OAd2B,IAAvBD,GACFV,EAAOM,OAAO,EAAGI,GAEfV,EAAOqB,OAAM/B,GAAKA,IAAMf,KAA6B,WAAfuB,IACxCa,GAAa,GAEXX,EAAOd,QAAUjC,EACnB+C,EAAS,CAACzB,EAAWxB,EAAkBiD,EAAOsB,KAAK,IAAIC,SAAStE,EAAgBsB,IACzEyB,EAAOd,SAAWjC,EAAiBF,EAAiBmC,QAC3Dc,EAAOoB,QAAQ7C,GAEboC,GACFX,EAAOlD,EAAoB,OAAS,WAAW,KAzFxB,CAACwC,GAAc,GAAGpC,IAASoC,IAAInC,IA2FjDqE,CAAmBxB,EAAOsB,KAAK,IAAI,EAGtCvC,EAAoB0C,IACxB,MAAMC,EAAuBrC,IAG7B,IAAIsC,EAFoB,CAACD,EAAsBA,GAW/C,MAPe,SAAXrE,GAAqBoE,IACvBE,EAA+B,iBAAbF,EAAM,GACpB,CAACA,EAAM,GAAIA,EAAM,IACjB,CAACA,EAAM,GAAIA,EAAM,KAEvBtD,EAAQyD,qBAAqBD,GAEtBA,CAAQ,EAGjB3D,SAAAA,EAAeG,EAAQQ,OAEvB,MAAMkD,EAAelC,EAAaxB,EAAQQ,MAAMf,MAAM,KAAK,GAE3D,IAAIoB,EAAY6C,EAEhB,MAAMC,EAAaC,YACjB/D,SAAAA,EAAeG,EAAQQ,OACvB,MAAM+C,EAAuBrC,IAE7B,IAAIc,EAA8B,QAAtBZ,EAAApB,EAAQ6D,sBAAc,IAAAzC,EAAAA,EAAImC,EAClCtB,EAA0B,QAApB6B,EAAA9D,EAAQ+D,oBAAY,IAAAD,EAAAA,EAAIP,EAGlC,GAAc,UAAVK,EAAEI,IAAiB,OAGvB,GAAIJ,EAAEK,SAAqB,MAAVL,EAAEI,IAAa,OAAOpD,EAAiB,CAACE,EAAuByC,IAGhF,GAAIK,EAAEK,SAAqB,MAAVL,EAAEI,IAAa,OAAOzD,EAAoBmD,GAG3D,GAAe,SAAXxE,IACS,cAAV0E,EAAEI,KAAuBhC,EAAQlB,GACvB,eAAV8C,EAAEI,KAAwBhC,EAAQuB,GAClC,OAKH,GAHAK,EAAEM,iBAGEN,EAAEK,SAAqB,MAAVL,EAAEI,IAAa,OAAOpD,EAAiB,CAACE,EAAuByC,IAGhF,IAAKvC,EAAYmD,SAASP,EAAEI,KAAM,OAElC,MAAMI,EAAwB,cAAVR,EAAEI,IAOtB,GALI3C,EAAgBW,MAASA,EAAOC,GAAOrB,EAAiB,CAACE,KAEzDS,EAAgBS,MAASA,EAAOC,GAAOrB,EAAiB,CAAC2C,KAGzDa,GAAyB,IAAVpC,EAAa,OAEhC,GAAI7C,GAAciF,GAAepE,EAAQQ,MAAMO,QAAUhC,EAAOgC,OAAS,EAEvE,YADAR,EAAoBxB,GAItB,MAAM6C,EAAc5B,EAAQQ,MAAMf,MAAM,IAElCsB,EAASsD,KAAKC,IAAIrC,EAAMD,GACxBuC,EAAoBxD,EAAS,EAG7ByD,EACJD,EAAqB,CAACvC,EAAOjB,GAAqB,CAACiB,EAAQ,EAAG,GAG1DyC,EAAM,CAACzC,EAAOuC,EAAoBxD,EAAS,EAAG6C,EAAEI,KAEhDtC,EAAS0C,EAAc,SAAW,MAElCM,EAAWlD,EAAaI,GAAa,EAAO,CAACF,EAAQ,CAAG+C,MAAKD,UAAU9C,KAE7E,IAAK0C,GAAevD,EAAUE,OAAS2D,EAAS3D,QAAUiB,EAAQd,EAAwBwD,GACxF1C,GAAS0C,EAAS3D,OAASF,EAAUE,OACrCkB,GAAOyC,EAAS3D,OAASF,EAAUE,YAC9B,GAAIqD,GAAevD,EAAUE,OAAS2D,EAAS3D,QAAUiB,EAAQlB,EAAuB,CAC7F,MAAMoB,EAAqBrB,EAAUE,OAAS2D,EAAS3D,OACvDiB,EAAQA,EAAQE,GAAsBpB,EAAwBA,EAAwBkB,EAAQE,EAC9FD,EAAMA,EAAMC,GAAsBpB,EAAwBA,EAAwBmB,EAAMC,CACzF,CAED3B,EAAoBmE,EAAU,CAAC1C,EAAOC,GAAK,EAGvC0C,EAAoB,KACxB,GAAI5E,SAAS6E,gBAAkB5E,EAAS,OAExC,MAAMgC,EAAQhC,EAAQ6D,eAChB5B,EAAMjC,EAAQ+D,aAEpB,GAAqB,iBAAV/B,GAAqC,iBAARC,EAAkB,OAE1D,IAAIuB,EAEJ,MAAMqB,EAAqBxD,EAAgBW,GACrC8C,EAAqBvD,EAAgBU,GAErC8C,EAAmBxD,EAAgBS,GACnCgD,EAAmB3D,EAAgBY,IAErC4C,GAAsBC,GAAsBE,GAAoBD,KAAkBvB,EAAW,CAC/FqB,EAAqB/D,EAAyBgE,EAAqB5D,IAA4Bc,EAC/FgD,EAAmBlE,EAAyBgE,EAAqB5D,IAA4Be,IAI1FuB,GAEL5C,EAAiB4C,EAAS,EAS5B,GALEjD,EADEpB,GAAcuE,IAAiB,GAAG3E,KAChB,GAEA2E,GAGlB1D,EAAQK,aAAa,aAAeL,EAAQK,aAAa,YAAa,MAAO,KAAY,EAE7FL,EAAQiF,iBAAiB,UAAWtB,GACpC5D,SAASkF,iBAAiB,kBAAmBN,GAE7C,MAAMO,EAAa,KACjBlF,EAAQmF,oBAAoB,UAAWxB,GACvC5D,SAASoF,oBAAoB,kBAAmBR,UACxC3E,EAAmCkF,UAAU,EAUvD,OAPA5F,OAAO8F,eAAepF,EAAS,aAAc,CAC3CQ,MAAO0E,EACPG,cAAc,EACdC,YAAY,EACZC,UAAU,IAGLL,CACT,CC1UA,SAASA,EACPvF,GAEA,GAAwB,oBAAbI,SAA0B,MAAO,KAAY,EAExD,MAAMC,EACa,iBAAVL,EAAqBI,SAASE,cAAcN,GAASA,QAAAA,EAAS,KAEvE,GAAgB,OAAZK,EAAkB,MAAO,KAAY,EAEzC,KAAMA,aAAmBE,kBACvB,MAAM,IAAIC,MAAM,gCAElB,MAAO,KACL,GAAI,eAAgBH,GAAyC,mBAAvBA,EAAQkF,WAC5C,OAAOlF,EAAQkF,YAAY,CAEjC,CCQA,SAASM,EACPhF,EACA/B,GAEA,MAAMG,iBAAEA,EAAgBF,cAAEA,GAAkBU,EAAqBX,GAE3DgH,EAAmBnE,GACvBA,EAAEoE,WAAWC,QAAQ,IAAK/G,GAUtBgD,GAFa,iBAAVpB,EAAqBiF,EAAgBjF,GANvB,CAACoF,IACtB,MAAMC,EAAc9C,OAAO6C,GAC3B,OAAO7C,OAAOC,MAAM6C,GAAeD,EAAIH,EAAgBI,EAAY,EAIdC,CAAetF,IAElCf,MAAM,IAE1C,IAAIoC,EAAS,GAEb,MAAMW,EAAa9D,GAAiBkD,EAAYuC,SAAS,KAEzD,IAAK,IAAI1B,EAAYA,EAAYb,EAAYmE,SACtChD,OAAOC,MAAMD,OAAON,MAAaZ,GAAUY,GAE5CA,IAAc7D,IAClBiD,GAAU,KAGZ,OAAOmE,WAAW,GAAGxD,EAAa,IAAM,KAAMX,IAChD,CC3BA,SAASoE,EACPC,EACAzH,GAOA,MALmB,CACjB0H,EACAC,EAAgE,CAAE,IAC/DF,EAAGC,EAAK7G,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAOd,GAAkB2H,GAGxC,CCfA,SAASC,EACP7F,EACA/B,GAGA,MAAMI,MACJA,EAAKE,OACLA,EAAMC,OAAEA,EAAMF,eACdA,EAAcG,mBACdA,EAAkBL,iBAAEA,EAAgBF,cACpCA,EAAaC,kBAAEA,GACbS,EAAqBX,GAEnB2B,EAAYvB,EAAQ,IAAM,IAE1BwE,EAAsBlC,GAAc,GAAGpC,IAASoC,IAAInC,IACpDsH,EAAgBnF,GAAcA,EAAEoF,OAAOzH,EAAgBsB,GAEvDoG,EAAWhG,EAAMkF,WAEvB,GAAwB,IAApBc,EAASzF,OAAc,OAAOsC,EAAmB,GAAGjD,IAAYxB,IAAmB0H,EAAa,OAEpG,IAAIG,EAAS,GAEb,MAAMjE,EAAa9D,GAAiB8H,EAASrC,SAAS,KAEhDuC,EAAclB,EAAehF,EAAO/B,GAAeiH,WAAWC,QAAQ,IAAK,KAE1EgB,EAAWC,GAAYF,EAAYhB,WAAWjG,MAAM,KAErDoH,EAAkBP,EACtBM,EACIA,EAASE,UAAU,EAAGhI,GACtB,IAGAiI,EAAiB,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAU5F,OAAQiG,GAAK,EACzCD,EAAe9D,QAAQ0D,EAAUG,UAAUH,EAAU5F,OAASiG,EAAGL,EAAU5F,OAASiG,EAAI,IAO1F,OALAP,EAAS,GAAGM,EAAe5D,KAAKlE,KAAsBL,IAAmBiI,IAErErE,IACFiE,EAAS9H,EAAoB,GAAG8H,KAAY,IAAIA,KAE3CpD,EAAmBoD,EAC5B,CCrEM,MAAAQ,EAAkB,CAAEvH,UAASwF,aAAYM,iBAAgBS,mBAAkBI"}